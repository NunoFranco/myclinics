<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BillingInfoText" xml:space="preserve">
    <value>Billing Information ({0})</value>
  </data>
  <data name="CancelOrderFinished" xml:space="preserve">
    <value>Order is cancelled sucessfully</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="ClearFilterMini" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Resources\ClearFilterMini.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="ClearFilterSmall" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Resources\ClearFilterSmall.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="CollectedInsurance" xml:space="preserve">
    <value>Insurance is collected</value>
  </data>
  <data name="FIXEDPRICE" xml:space="preserve">
    <value>Fixed Price</value>
  </data>
  <data name="InvoiceClosed" xml:space="preserve">
    <value>Invoice Closed Successfully!</value>
  </data>
  <data name="NotPendingInsurance" xml:space="preserve">
    <value>Procedure is not pending</value>
  </data>
  <data name="OrderCancel" xml:space="preserve">
    <value>Order is Cancel</value>
  </data>
  <data name="OrderEmpty" xml:space="preserve">
    <value>Order is not selected</value>
  </data>
  <data name="OrderPaid" xml:space="preserve">
    <value>Order is Paid</value>
  </data>
  <data name="OrderUnPaid" xml:space="preserve">
    <value>Order is UnPaid</value>
  </data>
  <data name="PERCENTAGE" xml:space="preserve">
    <value>Percent</value>
  </data>
  <data name="ReConfirmOrderFinished" xml:space="preserve">
    <value>Order is re-Confirmed sucessfully</value>
  </data>
  <data name="REDUCEAMOUNT" xml:space="preserve">
    <value>Reduce Amount</value>
  </data>
  <data name="SearchToolSmall" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Resources\SearchToolSmall.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="UpdateFailed" xml:space="preserve">
    <value>Changes are discard</value>
  </data>
  <data name="WrongFormat" xml:space="preserve">
    <value>Incorrent Number Format</value>
  </data>
  <data name="InvoiceNumberInvalid" xml:space="preserve">
    <value>Invoice Number cannot be null</value>
  </data>
  <data name="SaveInvoiceFailed" xml:space="preserve">
    <value>Cannot perform this operation at the moment, contact administrator for more detail</value>
  </data>
  <data name="SaveInvoiceSuccessful" xml:space="preserve">
    <value>Money is collected sucessfully</value>
  </data>
  <data name="Confirmed" xml:space="preserve">
    <value>Confirmed</value>
  </data>
  <data name="NotPending" xml:space="preserve">
    <value>No Insurance Confirm Pending</value>
  </data>
  <data name="PackageProcedureEditError" xml:space="preserve">
    <value>This is package procedure, cannot  apply insurance or discount</value>
  </data>
  <data name="Pending" xml:space="preserve">
    <value>Waiting for confirm</value>
  </data>
  <data name="NumberFormatInvalid" xml:space="preserve">
    <value>Number format invalid</value>
  </data>
  <data name="Totalreceivednotenough" xml:space="preserve">
    <value>Money received is not enough pay for this invoice</value>
  </data>
  <data name="CollectScreenConfirmInsurance" xml:space="preserve">
    <value>Confirmed waiting insurance successfully</value>
  </data>
  <data name="DiscountInsuranceItemRuleNotSelected" xml:space="preserve">
    <value>Please choose Discount/insurance Type, Type and Discount/insurance Amount Or Data Invalid</value>
  </data>
  <data name="DiscountInsuranceRulesExisting" xml:space="preserve">
    <value>One or many selected procedure type conflicts with an existing procedure.</value>
  </data>
  <data name="Rejected" xml:space="preserve">
    <value>Rejected</value>
  </data>
  <data name="PackgeProcedure" xml:space="preserve">
    <value>This is Package procedure</value>
  </data>
  <data name="CollectScreenRejectedInsurance" xml:space="preserve">
    <value>Waiting Insurance is Rejected</value>
  </data>
  <data name="CurrencyDisplayFormat" xml:space="preserve">
    <value>{0} - {1}</value>
  </data>
  <data name="ConfirmPrimaryCurrencyChanged" xml:space="preserve">
    <value>All the Price will changed when the Primary currency is Changed</value>
  </data>
  <data name="ConfirmPrimaryExRateCurrencyChanged" xml:space="preserve">
    <value>Currency Exchange Rate will be changed base on when Primary Ex-Rate Currency is changed</value>
  </data>
  <data name="DropDownMandatorySelected" xml:space="preserve">
    <value>At Least one item is selected</value>
  </data>
</root>