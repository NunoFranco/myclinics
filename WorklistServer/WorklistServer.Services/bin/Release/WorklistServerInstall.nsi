; Script generated by the HM NIS Edit Script Wizard.

; defines required for upgrade process
; the '1 ##VERSION string is used by the build script as a token
!define MAJOR_VERSION 1 ##MAJOR
!define MINOR_VERSION 0 ##MINOR
!define BUILD 0 ##BUILDNUMBER
!define REVISION 1 ##REVISIONNUMBER
!define SERVICEPACK 
; defines the most recent prior build that the installer is capable of
; performing a database upgrade on
; value must be changed from the build script
!define RELEASELABEL "" ##ReleaseLabel

!define PRODUCT_NAME "Modality Worklist Server"
!define PRODUCT_VERSION "${MAJOR_VERSION}.${MINOR_VERSION} ${SERVICEPACK}"
!define PRODUCT_PUBLISHER "BlowFishSolutions Inc"
!define PRODUCT_WEB_SITE "http://www.Blowfishsolutions.com"
!define PRODUCT_UNINST_ROOT_KEY "HKLM"

!ifdef OFFICIALRELEASEBUILD
!define PRODUCT_SERVICE_NAME "${PRODUCT_NAME} Service"
!define PRODUCT_VDIR_NAME "RIS"
!define PRODUCT_DB_NAME "RIS"
!define PRODUCT_DB_USER "risuser"
!define PRODUCT_DB_PASS "rispass"
!else

!define PRODUCT_STARTMENU_FOLDER "$SMPROGRAMS\ClearCanvas\${PRODUCT_NAME} ${RELEASELABEL}"
!define PRODUCT_SERVICE_NAME "${PRODUCT_NAME} Service ${RELEASELABEL}"
!define PRODUCT_VDIR_NAME "RIS${RELEASELABEL}"
!define PRODUCT_DB_NAME "RISDB${RELEASELABEL}"
!define PRODUCT_DB_USER "risuser${RELEASELABEL}"
!define PRODUCT_DB_PASS "rispass${RELEASELABEL}"
!endif

!ifdef RELEASELABEL
  !define INSTALLER_DISPLAY_NAME "${PRODUCT_NAME} ${PRODUCT_VERSION} ${RELEASELABEL}"
  !define PRODUCT_SHORTCUT_NAME "${PRODUCT_NAME} ${RELEASELABEL}"
!else
  !define INSTALLER_DISPLAY_NAME "${PRODUCT_NAME} ${PRODUCT_VERSION}"
  !define PRODUCT_SHORTCUT_NAME "${PRODUCT_NAME}"
!endif

;define for common NSISIncludes Path
!define NSISINCLUDES "..\..\NSISIncludes"

;define for Sample Data Sub-Directory
!define SAMPLEDATASUBDIR "Public"

; MUI 1.67 compatible ------
!include "${NSISINCLUDES}\dotNETCC.nsh"
!include "${NSISINCLUDES}\DumpLog.nsh"
!include "${NSISINCLUDES}\FileFunc.nsh"
!include "${NSISINCLUDES}\GetDbVersion.nsh"
!include "${NSISINCLUDES}\HandlePriorInstall.nsh"
!include "${NSISINCLUDES}\LogicLib.nsh"
!include "${NSISINCLUDES}\MUI.nsh"
!include "${NSISINCLUDES}\RemoveService.nsh"
!include "${NSISINCLUDES}\Replacement.nsh"
!include "${NSISINCLUDES}\Sections.nsh"
!include "${NSISINCLUDES}\servicelib.nsh"
!include "${NSISINCLUDES}\VDirectory.nsh"
!include "${NSISINCLUDES}\XML.nsh"

; MUI Settings
!define MUI_ABORTWARNING
!define MUI_ICON "${NSISDIR}\Contrib\Graphics\Icons\modern-install.ico"
!define MUI_UNICON "${NSISDIR}\Contrib\Graphics\Icons\modern-uninstall.ico"

; Platform-specific Settings (x86 vs. x64)
!ifdef PLATFORM_X64
!define PLATFORM_NAME "x64"
!define PLATFORM_PROGRAMFILES $PROGRAMFILES64
!define PLATFORM_SUBFOLDER "x64"
!define PLATFORM_VC2008 "{350AA351-21FA-3270-8B7A-835434E766AD}"
!define PLATFORM_VC2008SP1 "{8220EEFE-38CD-377E-8595-13398D740ACE}"
!else
!define PLATFORM_X64 "false"
!define PLATFORM_NAME "x86"
!define PLATFORM_PROGRAMFILES $PROGRAMFILES
!define PLATFORM_SUBFOLDER ""
!define PLATFORM_VC2008 "{FF66E9F6-83E7-3A3E-AF14-8DE9A809A6A4}"
!define PLATFORM_VC2008SP1 "{9A25302D-30C0-39D9-BD6F-21E6EC160475}"
!endif

; Check for .NET Framework defines
!define DOTNET_VERSION_REQ "3"
!define CHECKONLY "True" ;If flag is set True then only the check for .NET will happen, if not present will Abort Install

; Welcome page
!insertmacro MUI_PAGE_WELCOME
; Components page
!define MUI_PAGE_CUSTOMFUNCTION_LEAVE VerifyComponent
!insertmacro MUI_PAGE_COMPONENTS
; Directory page
!insertmacro MUI_PAGE_DIRECTORY
; Custom page - get database admin login
Page custom PageDatabaseAdmin ValidatePageDatabaseAdmin
; Custom page - fetches database info
Page custom PageDatabaseInstall ValidatePageDatabaseInstall
; Custom page - get database connection info
Page custom PageDatabaseConnectOnly ValidatePageDatabaseConnectOnly
; Custom page - fetches ris server info
Page custom PageRisServer ValidatePageRisServer
; Custom page - sets up administrator account
Page custom PageRisAdminUser ValidatePageRisAdminUser
; Instfiles page
!insertmacro MUI_PAGE_INSTFILES
; Finish page
!insertmacro MUI_PAGE_FINISH

; Uninstaller pages
!insertmacro MUI_UNPAGE_INSTFILES

; Language files
!insertmacro MUI_LANGUAGE "English"

; Reserve files
ReserveFile "PageDatabaseAdmin.ini"
ReserveFile "PageDatabaseInstall.ini"
ReserveFile "PageDatabaseConnectOnly.ini"
ReserveFile "PageRisServer.ini"
ReserveFile "PageRisAdminUser.ini"
!insertmacro MUI_RESERVEFILE_INSTALLOPTIONS
; MUI end ------

; Variables
; Collected in PageDatabaseAdmin.ini
Var INI_ADMINID
Var INI_ADMINPASS
Var INI_HOSTINSTANCE
Var INI_2SLASHHOSTINSTANCE
; Collected in PageDatabaseInstall.ini
; or Collected from PageDatabaseConnectOnly.ini
Var INI_DBNAME
Var INI_USERID
Var INI_USERPASS
; Collected in PageRisServer.ini
Var INI_RISLOCALCLIENTS
Var INI_RISREMOTECLIENTS
Var INI_RISHOST
Var INI_RISPORT
; Collected in PageRisAdminUser.ini
Var INI_RISADMIN
Var INI_RISPASS
; Hardcoded for Virtual Directory folder name
Var VDIRNAME
; Various Flags and uninstall variables
Var OLD_DB_EXISTS
Var PRIOR_DB_VERSION
Var SAME_DB_VERSION
Var OLD_DB_NO_UPGRADE
Var PERFORM_DB_UPGRADE
Var PERFORM_ASSEMBLY_UPGRADE
Var UNINSTALLER_STRING
; For Silent Install/Uninstaller
Var INI_REMOVEDB

Name "${INSTALLER_DISPLAY_NAME}"
OutFile "${PRODUCT_NAME}.exe"
InstallDir "${PLATFORM_PROGRAMFILES}\ClearCanvas\${PRODUCT_NAME}"
ShowInstDetails show
ShowUnInstDetails show

#Core Components
  Section "-InstallDir"
    SetOutPath "$INSTDIR"
    SetOverwrite ifnewer
    File /x *.bat /x *.pdb  "Release\*.*"
  SectionEnd

SectionGroup /e "Application Server" GRPSRV
  LangString DESC_GRPSRV ${LANG_ENGLISH} "The RIS server and Web components."
  
  
  Section "-Install Shred Host Service" SRVHOST
    !insertmacro SERVICE "create" "${PRODUCT_SERVICE_NAME}" \
    "path=$INSTDIR\WorklistServer.Services.exe ;autostart=1;display=${PRODUCT_SERVICE_NAME};"

    ;Sets description
    WriteRegStr HKLM \
    "SYSTEM\CurrentControlSet\Services\${PRODUCT_SERVICE_NAME}" \
    "Description" "Modality Worklist Server."
    
    #Starts Service
    ;IfFileExists "$INSTDIR\Clearcanvas.Server.ShredHostService.exe" "" +2
    ;!insertmacro SERVICE "installed" "${PRODUCT_SERVICE_NAME}" "action=start;"
  SectionEnd
  LangString DESC_SRVHOST ${LANG_ENGLISH} "Modality Worklist Server windows service."

 
  
 
!insertmacro MUI_FUNCTION_DESCRIPTION_BEGIN
  !insertmacro MUI_DESCRIPTION_TEXT ${SRVRIS} $(DESC_SRVRIS)
  !insertmacro MUI_DESCRIPTION_TEXT ${GRPDB} $(DESC_GRPDB)
  !insertmacro MUI_DESCRIPTION_TEXT ${GRPSRV} $(DESC_GRPSRV)
  !insertmacro MUI_DESCRIPTION_TEXT ${SRVHOST} $(DESC_SRVHOST)
  !insertmacro MUI_DESCRIPTION_TEXT ${GRPSAMPLE} $(DESC_GRPSAMPLE)
!insertmacro MUI_FUNCTION_DESCRIPTION_END

Function VerifyComponent
  SectionGetFlags ${GRPDB} $R1
  IntOp $R1 $R1 & ${SF_SELECTED}
  SectionGetFlags ${GRPSRV} $R2
  IntOp $R2 $R2 & ${SF_SELECTED}
  SectionGetFlags ${GRPSAMPLE} $R3
  IntOp $R3 $R3 & ${SF_SELECTED}
  
  #Verify Selection
  ${If} $R1 != ${SF_SELECTED}
  ${AndIf} $R2 != ${SF_SELECTED}
  ${AndIf} $R3 != ${SF_SELECTED}
    MessageBox MB_OK|MB_ICONINFORMATION "At least one component must be selected to continue."
    Abort
  ${EndIf}
  
  #Check for solo selection
  ${If} $R3 = ${SF_SELECTED}
  ${AndIf} $R2 != ${SF_SELECTED}
    MessageBox MB_OK|MB_ICONINFORMATION "Sample Data cannot be selected without the Application Server."
    Abort
  ${EndIf}
FunctionEnd


Section -AdditionalIcons
  SetShellVarContext all
  SetOutPath $INSTDIR
  CreateDirectory "${PRODUCT_STARTMENU_FOLDER}"
   CreateShortCut "${PRODUCT_STARTMENU_FOLDER}\Uninstall.lnk" "$INSTDIR\uninst.exe"
SectionEnd

Section -Post
  WriteUninstaller "$INSTDIR\uninst.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayName" "$(^Name)"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "UninstallString" "$INSTDIR\uninst.exe"
  
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayVersion" "${PRODUCT_VERSION}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "URLInfoAbout" "${PRODUCT_WEB_SITE}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "Publisher" "${PRODUCT_PUBLISHER}"

  StrCpy $0 "$INSTDIR\install.log"
  Push $0
  Call DumpLog
SectionEnd

LangString PageDatabaseAdmin_TITLE ${LANG_ENGLISH} "Database connection page"
LangString PageDatabaseAdmin_SUBTITLE ${LANG_ENGLISH} "Specify a database user account with database creation privileges on this page."
LangString PageDatabaseInstall_TITLE ${LANG_ENGLISH} "Database and user installation page"
LangString PageDatabaseInstall_SUBTITLE ${LANG_ENGLISH} "This page is used to enter the database and general user creation details."
LangString PageDatabaseConnectOnly_TITLE ${LANG_ENGLISH} "Database connection page"
LangString PageDatabaseConnectOnly_SUBTITLE ${LANG_ENGLISH} "This page is used to enter the database connection details for a RIS database that already exists."
LangString PageRisServer_TITLE ${LANG_ENGLISH} "RIS Server connection setup page"
LangString PageRisServer_SUBTITLE ${LANG_ENGLISH} "This page is used to select the RIS Server listener details."
LangString PageRisAdminUser_TITLE ${LANG_ENGLISH} "RIS Administrator User setup page"
LangString PageRisAdminUser_SUBTITLE ${LANG_ENGLISH} "Specify details for the RIS Administrator account."

Function .onInit
  ; Getting Started
  MessageBox MB_YESNO|MB_ICONINFORMATION \
    "BEFORE YOU INSTALL$\n$\nPlease read our Getting Started Guide for information about prerequisites and the installation process.$\n$\nOpen a browser to the Getting Started Guide now?" \
    IDNO guideDone
  ;ExecShell "open" "www.clearcanvas.ca/docs/GettingStartedGuide"

  guideDone:

  ; Check for Platform compared to installer platform
  GetVersion::WindowsPlatformArchitecture
   Pop $R0
  ${If} $R0 == "32"
  ${AndIf} ${PLATFORM_NAME} == "x64"
    MessageBox MB_OK|MB_ICONSTOP "A platform mismatch has been detected.$\n$\nThe 64-bit version of ${PRODUCT_NAME} cannot be installed on a 32-bit Operating System.  Installation will now be aborted." /SD IDOK
    Abort
  ${ElseIf} $R0 == "64"
  ${AndIf} ${PLATFORM_NAME} == "x86"
    MessageBox MB_OK|MB_ICONSTOP "A platform mismatch has been detected.$\n$\nThe 32-bit version of ${PRODUCT_NAME} cannot be installed on a 64-bit Operating System.  Installation will now be aborted." /SD IDOK
    Abort
  ${EndIf}
  
  ; Check for Windows Version
  ; using WindowsName instead of WindowsVersion because of difficulties encountered in performing
  ; numerical comparisons on version numbers.
  GetVersion::WindowsName
   Pop $R0
   ${If} $R0 == "95 OSR2"
   ${OrIf} $R0 == "95"
   ${OrIf} $R0 == "98 SE"
   ${OrIf} $R0 == "98"
   ${OrIf} $R0 == "ME"
   ${OrIf} $R0 == "NT"
   ${OrIf} $R0 == "CE"
   ${OrIf} $R0 == "2000"
     MessageBox MB_OK "${PRODUCT_NAME} requires Windows XP or greater.  The install has aborted."
     Abort "${PRODUCT_NAME} requires Windows XP or greater.  The install has aborted."
   ${EndIf}
   
  ; Check for .NET Framework Install
  ; discovered an unexpected formatting idiosyncrasy for the version string passed into CheckDotNet
  ; e.g. if the req'd version is 3.0.1 or higher but installed version is 3.0.04502.0
  ; using 3.0.1 or 3.0.10... 3.0.1000 doesn't work.  Have to specify 3.0.10000 or a greater number of zeroes
  !insertmacro CheckDotNET "${DOTNET_VERSION_REQ}" "${CHECKONLY}"
  
  !insertmacro MUI_INSTALLOPTIONS_EXTRACT "PageDatabaseAdmin.ini"
  !insertmacro MUI_INSTALLOPTIONS_EXTRACT "PageDatabaseInstall.ini"
  !insertmacro MUI_INSTALLOPTIONS_EXTRACT "PageDatabaseConnectOnly.ini"
  !insertmacro MUI_INSTALLOPTIONS_EXTRACT "PageRisServer.ini"
  !insertmacro MUI_INSTALLOPTIONS_EXTRACT "PageRisAdminUser.ini"
  
  ; Check for prior or conflicting versionsand prompt to uninstall them before continuing
  Push "ClearCanvas.Ris.Server.Executable.exe" ;version determining assembly
  GetFunctionAddress $R0 InstalledVersionLower
  Push $R0
  GetFunctionAddress $R0 SameVersionInstalled
  Push $R0
  GetFunctionAddress $R0 InstalledVersionHigher
  Push $R0
  GetFunctionAddress $R0 FailedUninstall
  Push $R0
  Call HandlePriorInstall
  
FunctionEnd

Function installedVersionHigher
  MessageBox MB_OK|MB_ICONSTOP \
  "The Installer has detected that a NEWER version of ${PRODUCT_NAME} is already installed. $\n$\nTo continue with this installation please first uninstall ${PRODUCT_NAME}."
  Abort
FunctionEnd

Function sameVersionInstalled
  MessageBox MB_OK|MB_ICONSTOP \
  "The Installer has detected that the SAME version of ${PRODUCT_NAME} is already installed. $\n$\nTo continue with this installation please first uninstall ${PRODUCT_NAME}."
  Abort
FunctionEnd

Function installedVersionLower
  MessageBox MB_OKCANCEL|MB_ICONEXCLAMATION \
  "Installer has detected that an older ${PRODUCT_NAME} version is already installed. $\n$\nClick `OK` to proceed with upgrade or `Cancel` to cancel this upgrade." \
  IDOK setUninstall
  Abort

  ;Run the uninstaller
  setUninstall:
  StrCpy $PERFORM_ASSEMBLY_UPGRADE "True"
  StrCpy $UNINSTALLER_STRING '$R0'
  Return
FunctionEnd

Function FailedUninstall
  MessageBox MB_OK|MB_ICONSTOP "Installation cannot proceed because there was a problem with the uninstall of the previous version."
  Abort
FunctionEnd


##Function Includes
!insertmacro Replacement
!insertmacro RemoveService "ClearCanvas.Server.ShredHostService.exe" "${PRODUCT_SERVICE_NAME}"
!insertmacro VDirectory
!insertmacro un.GetParameters
!insertmacro un.GetOptions

Function ValidatePageRisAdminUser
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_RISADMIN "PageRisAdminUser.ini" "Field 3" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_RISPASS "PageRisAdminUser.ini" "Field 5" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $R0 "PageRisAdminUser.ini" "Field 7" "State"
  StrCmp $INI_RISADMIN "" "" +3
  MessageBox MB_ICONEXCLAMATION|MB_OK "RIS Administrator Username cannot be blank. Please enter a Username."
  Abort
  StrCmp $INI_RISPASS "" "" +3
  MessageBox MB_ICONEXCLAMATION|MB_OK "RIS Administrator Password cannot be blank. Please enter a Password."
  Abort
  StrCmp $R0 "" "" +3
  MessageBox MB_ICONEXCLAMATION|MB_OK "Comfirmation Administrator Password cannot be blank. Please enter a Password."
  Abort
  StrCmp $INI_RISPASS $R0 +3 ""
  MessageBox MB_ICONEXCLAMATION|MB_OK "Password fields do not match. Please re-enter Passwords."
  Abort
FunctionEnd

Function SetAppConfigHostnameAndPortSettings
    ;RemoteCoreServiceSettings
    ${xml::GotoPath} "/configuration/applicationSettings/ClearCanvas.Enterprise.Common.RemoteCoreServiceSettings" $0
    ${xml::FirstChildElement} "setting" $0 $1

    loopRemoteCoreServiceSettingBaseUrl:
    ${xml::GetAttribute} "name" $0 $1
    StrCmp "BaseUrl" $0 foundRemoteCoreServiceSettingBaseUrl ;breaks loop

    ${xml::NextSiblingElement} "setting" $0 $1
    StrCmp $1 "0" loopRemoteCoreServiceSettingBaseUrl AppConfigFailed ;loops unless an error occurred

    foundRemoteCoreServiceSettingBaseUrl:
    ${xml::FirstChildElement} "value" $0 $1
    ${xml::SetText} "net.tcp://$INI_RISHOST:$INI_RISPORT/" $1

    ;ClearCanvas.Ris.Server.WebServicesSettings
    ${xml::GotoPath} "/configuration/applicationSettings/ClearCanvas.Ris.Server.WebServicesSettings" $0
    ${xml::FirstChildElement} "setting" $0 $1

    loopRisBaseUrl:
    ${xml::GetAttribute} "name" $0 $1
    StrCmp "BaseUrl" $0 foundRisBaseUrl ;breaks loop

    ${xml::NextSiblingElement} "setting" $0 $1
    StrCmp $1 "0" loopRisBaseUrl AppConfigFailed ;loops unless an error occurred

    foundRisBaseUrl:
    ${xml::FirstChildElement} "value" $0 $1
    ${xml::SetText} "net.tcp://$INI_RISHOST:$INI_RISPORT/" $1
    
    Return

    AppConfigFailed:
      MessageBox MB_OK|MB_ICONSTOP "A failure has occurred on service component configuration. Review the installation log for details.  A reinstallation will be required."
FunctionEnd

Function SetAppConfigHibernateSettings
  ${xml::GotoPath} "/configuration/hibernate-configuration/session-factory" $0
  ${xml::FirstChildElement} "property" $0 $1

  loopAppConnectionString:
  ${xml::GetAttribute} "name" $0 $1
  StrCmp "connection.connection_string" $0 foundAppConnectionString ;breaks loop

  ${xml::NextSiblingElement} "property" $0 $1
  StrCmp $1 "0" loopAppConnectionString AppConfigFailed ;loops unless an error occurred

  foundAppConnectionString:
  ${xml::SetText} "Data Source=$INI_HOSTINSTANCE;Initial Catalog=$INI_DBNAME;User Id=$INI_USERID;Password=$INI_USERPASS" $0

  ${xml::GotoPath} "/configuration/hibernate-configuration/session-factory" $0
  ${xml::FirstChildElement} "property" $0 $1

  loopDefaultSchema:
  ${xml::GetAttribute} "name" $0 $1
  StrCmp "default_schema" $0 foundDefaultSchema ;breaks loop

  ${xml::NextSiblingElement} "property" $0 $1
  StrCmp $1 "0" loopDefaultSchema AppConfigFailed

  foundDefaultSchema:
  ${xml::SetText} "$INI_DBNAME.dbo" $0

  Return

  AppConfigFailed:
    MessageBox MB_OK|MB_ICONSTOP "A failure has occurred on hibernate configuration. Review the installation log for details.  A reinstallation will be required."

FunctionEnd

Function un.RemoveDBandUser
  IfFileExists "$INSTDIR\scripts" +2
    Return

  IfSilent +1 nonSilent
    StrCmp $INI_REMOVEDB "True" remove doNotRemove

nonSilent:
  MessageBox MB_ICONQUESTION|MB_YESNO|MB_DEFBUTTON2 "Remove the RIS database during uninstall?$\n$\nWarning: once the database is removed it cannot be restored.  It can however always be removed at a later time." IDNO doNotRemove
  
remove:
  DetailPrint "Removing database and RIS user..."
  nsExec::ExecToLog '"cscript" "$INSTDIR\scripts\dbfile.js" "$INSTDIR\scripts\RemoveDB.sql"'
  nsExec::ExecToLog '"cscript" "$INSTDIR\scripts\dbfile.js" "$INSTDIR\scripts\RemoveUser.sql"'

doNotRemove:
FunctionEnd

Function un.onUninstSuccess
  HideWindow
  MessageBox MB_ICONINFORMATION|MB_OK "$(^Name) was successfully removed from your computer."
FunctionEnd

Function un.onInit
  ;For Silent Install
  ${un.GetParameters} $R0
  ${un.GetOptions} $R0 /REMOVEDB= $INI_REMOVEDB
  
  MessageBox MB_ICONQUESTION|MB_YESNO|MB_DEFBUTTON2 "Are you sure you want to completely remove $(^Name) and all of its components?" /SD IDYES IDYES +2
  Abort
FunctionEnd

Section Uninstall
  !undef UN
  !define UN "un."
  
  SetShellVarContext all

  IfFileExists "$INSTDIR\ClearCanvas.Server.ShredHostService.exe" 0 +2
  Call un.RemoveService
  
  IfFileExists "$INSTDIR\web" 0 +3
  StrCpy $VDIRNAME "${PRODUCT_VDIR_NAME}"
  Call un.DeleteVDir

  IfFileExists $INSTDIR\scripts 0 +2
  Call un.RemoveDBandUser
  
  Delete "$INSTDIR\${PRODUCT_NAME}.url"
  Delete "$INSTDIR\uninst.exe"

  Delete "$INSTDIR\model.ddl"
  Delete "$INSTDIR\hibernate.cfg.xml"
  Delete "$INSTDIR\actionmodels.xml"
  Delete "$INSTDIR\Logging.config"
  Delete "$INSTDIR\CCRISAdminGuide.chm"
  Delete "$INSTDIR\ClearCanvas.Ris.Server.Executable.exe.config"
  Delete "$INSTDIR\ClearCanvas.Ris.Server.Executable.exe"
  Delete "$INSTDIR\ClearCanvas.Server.ShredHostService.exe.config"
  Delete "$INSTDIR\ClearCanvas.Server.ShredHostService.exe"

  Delete "${PRODUCT_STARTMENU_FOLDER}\RIS Admin Guide.lnk"
  Delete "${PRODUCT_STARTMENU_FOLDER}\Uninstall.lnk"
  Delete "${PRODUCT_STARTMENU_FOLDER}\Website.lnk"
  Delete "${PRODUCT_STARTMENU_FOLDER}\${PRODUCT_SHORTCUT_NAME}.lnk"

  RMDir "${PRODUCT_STARTMENU_FOLDER}"
  RMDir /r "$INSTDIR\scripts"
  RMDir /r "$INSTDIR\plugins"
  RMDir /r "$INSTDIR\common"
  RMDir /r "$INSTDIR\web"
  RMDir /r "$INSTDIR\SampleData\"
  RMDir /r "$INSTDIR\cert\"

  Delete "$INSTDIR\*.*"

  DeleteRegKey ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}"
  SetAutoClose true
  
  StrCpy $0 "$INSTDIR\uninstall.log"
  Push $0
  Call un.DumpLog
SectionEnd